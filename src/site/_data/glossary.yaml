
# Summary and term values are used in both the page meta tags and also the auto generated
# open graph and twitter card images. Those 2 fields should not exceed the following character counts:
# term: 30
# summary: 250

- term: 'API'
  id: 'api'
  summary: 'An acronym for Application Programming Interface. It defines interactions that allow two applications to talk to each other.'
  definition: 'API is an acronym for Application Programming Interface. It defines interactions that allow two applications to talk to each other.
  

  The "A" in Jamstack stands for APIs. Jamstack sites rely heavily on reusable APIs and the emergent [API Economy](/glossary/api-economy/) to add dynamic content and interactivity to otherwise [static sites](/glossary/ssg/).'


- term: 'API Economy'
  id: 'api-economy'
  summary: 'The growing ecosystem of third-party [APIs](/glossary/api/) that are available for developers to use.'
  definition: 'The API Economy describes the ever-growing ecosystem of third-party APIs that are available for developers to use.
  
  
  Further reading: ["What is the API Economy and How Brands Can Benefit From It" by Richard Yao](https://medium.com/ipg-media-lab/what-is-the-api-economy-and-how-brands-can-benefit-from-it-b46210d0434d)'


- term: 'Atomic deploys'
  id: 'atomic'
  summary: 'Contained and complete deploys, served only when all of their assets and config are complete and totally in place.'
  definition: 'The word "atomic" is used to describe deploys which include no interim state or maintenance window. 
  

  With atomic deploys, all of the code, assets and configuration of a site are updated at once so that a website cannot be served in a partially updated state. 
  

  While deploying and updating sites via FTP was once popular this would result in some updated files being present on the server and ready to serve while others were still in transit. Modern platforms avoid this situation by providing atomic deploys where the new version of the site only begins receiving request when all assets and configurations are available. See also: [Immutable deploys](/glossary/immutable/).
  

  Further reading: ["Terminology explained: Atomic and immutable deploys" by Phil Hawksworth](https://www.netlify.com/blog/2021/02/23/terminology-explained-atomic-and-immutable-deploys/)'


- term: 'CDN (Content Delivery Network)'
  id: 'cdn'
  summary: 'A network optimized for serving assets to users. A CDN can provide redundancy and also improve delivery performance as a result of being geographically distributed.'
  definition: 'A CDN is a distributed network optimized for serving assets to users. By being geographically distributed, a CDN can provide redundancy and also improve delivery performance as a result of servicing requests from the infrastructure closest to the user making the request.
  
  
  Further reading: ["What is a CDN? How do CDNs work?" from Cloudflare Documentation](https://www.cloudflare.com/learning/cdn/what-is-a-cdn/)'


- term: 'Client render'
  id: 'client-render'
  summary: 'To generate the view of content, or update user interface elements, in the browser using JavaScript.'
  definition: 'To generate the view of content in the browser using JavaScript. This often involves transmitting data to the browser rather than markup which is ready for the browser to display, and then using JavaScript to transform that data into a view by modifying the DOM. See also: [Server render](/glossary/server-render/); [Pre-render](/glossary/pre-render/).'


- term: 'Decoupling'
  id: 'decoupling'
  summary: 'To create a distinct separation between systems or services, making it easier to work with each individual component independently.'
  definition: 'Decoupling is the process of creating a clean separation between systems or services. By decoupling the services needed to operate a site, each component part can become easier to reason about, can be independently swapped out or upgraded, and can be designated the purview of dedicated specialists either within an organization, or as a third party.
  
  
  In the context of the Jamstack, decoupling often refers to the separation between the "presentation layer" (front end) and the "logic/data layer" (back end/database) of an app. This structural style lends itself well to a [serverless](/glossary/serverless/) approach.'


- term: 'Headless technology'
  id: 'headless-technology'
  summary: 'Often referring to decoupled content management systems, headless tools have no responsibility for generating the view or presentation of content, but instead focus on the management of and access to content via APIs.'
  definition: 'The term "headless" refers to removing the dependency of knowing where data will be displayed and instead just holding the data to be used wherever the developer chooses. This is often used to describe a CMS where content can be entered, held, then where and how that content is displayed is decided separately.'


- term: 'Hydration'
  id: 'hydration'
  summary: 'The process of using client-side rendering to add interactivity to server-rendered apps.'
  definition: 'Hydration is the process of using [client-side rendering](/glossary/client-render/) to add interactivity to [server-rendered](/glossary/server-render/) apps. In effect, the browser "picks up" where the server "left off" creating the app. 
  
  
  Hydration is a feature of React that enables us to add dynamic content to sites built with [static site generators](/glossary/ssg/) (SSGs) like [Gatsby](/generators/gatsby/).
  
  
  Further reading: ["Hydration" from Gatsby Documentation](https://www.gatsbyjs.com/docs/glossary/hydration/)'


- term: 'Immutable deploys'
  id: 'immutable'
  summary: 'Once created, an immutable deploy of a website becomes an artifact which will not change. It is a known version of the site which can be redeployed with ease.'
  definition: 'While a "mutable" item can change (be mutated) over time, an "immutable" item cannot. Once created, an immutable deploy of a website becomes an artifact which will not change. Instead, deploys result in new versions or instances of the site, and traffic is routed to them accordingly.
  
  
  When paired with [atomic deploys](/glossary/atomic/), immutable builds make it possible for sites to enjoy abilities such as instant rollbacks and versioning, and help to ensure that the code and assets of a website can be maintained in a known state.' 


- term: 'Microservice'
  id: 'microservice'
  summary: 'A software design style that structures an app around loosely coupled, independently deployable modules.'
  definition: 'Microservice architecture is a software design style that structures an app around loosely coupled, independently deployable modules. 
  

  In the context of the Jamstack, this means that we primarily rely on external distributed services - [the API economy](/glossary/api-economy) and [serverless functions](/glossary/serverless) - for our app functionality. 


  The microservice paradigm is an extension of Service-Oriented Architecture (SOA), and an alternative to the more traditional monolithic architecture. 


  Further reading: ["What are Microservices?" By Sarah Drasner](https://www.netlify.com/blog/2019/11/18/what-are-microservices/)'


- term: 'Pre-render / Pre-generate'
  id: 'pre-render'
  summary: 'To preload all elements of a page at build time rather than on-demand whenever the server receives a request.'
  definition: 'Pre-rendering is a process of preloading all elements of a page at build time rather than on-demand whenever the server receives a request for that page. This dramatically reduces the amount of work that the server needs to do to deliver the page.'


- term: 'Server render'
  id: 'server-render'
  summary: 'To generate markup on the server rather than on the client. Server render usually refers to the process happening at request time, rather than in advance at build time.'
  definition: 'To generate markup on the server rather than on the [client](/glossary/client-render/). 
  

  Server render differs from [pre-render](/glossary/pre-render/) in that server render usually refers to the process happening at request time, rather than at build time. The term is sometimes used as a catch-all for any rendering taking place on a server, and so disambiguation is often sensible.'


- term: 'Serverless'
  id: 'serverless'
  summary: 'A means of providing a runtime environment for code without the need for, knowledge of, or control over, the underlying environment.'
  definition: '"Serverless" or "serverless functions" are a means of providing a runtime environment for code without the need for, knowledge of, or control over, the underlying environment. This [allows for event-driven logic on the server without setting up infrastructure](https://twitter.com/sarah_edo/status/1361692489384517634). 
  
  
  Common confusion over the term stems from the observation that "there is still a server somewhere." This may be true, but no servers are present in the problem space of those working with serverless functions. In a similar way, a wireless router will have wires for power and connectivity, but no wires exist in the domain of the devices utilizing a wireless router to connect to the internet.'


- term: 'Static site generator'
  id: 'ssg'
  summary: 'A tool that can transform content, data, and templates into files which can be deployed to a hosting environment as a ready-to-serve website.'
  definition: 'A static site generator is a tool that can be run as part of a build to transform content, data, and templates into files which can be deployed to a hosting environment as a ready-to-serve website.
  
  
  Further reading: ["What is a Static Site Generator? And 3 ways to find the best one" by Phil Hawksworth](https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/?utm_source=jamstackorg&utm_medium=what-are-ssg-pnh&utm_campaign=devex)'


- term: 'Dynamic server'
  id: 'dynamic-server'

- term: 'Edge Network'
  id: 'edge-network'

- term: 'Markdown'
  id: 'markdown'

- term: 'Markup'
  id: 'markup'

- term: 'Monolith'
  id: 'monolith'

- term: 'Monorepo'
  id: 'monorepo'